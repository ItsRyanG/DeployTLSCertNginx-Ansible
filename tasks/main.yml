---

- name: yum install openssl
  package:
    name: openssl
    state: present

- name: copy certificates and verify chain 
  block:
    - name: copy certificate for {{ item.name }}
      copy:
        content: "{{ item.ssl_cert }}"
        dest: "{{ item.ssl_certificate_path }}"
        backup: yes
        mode: u=rw,g=r,o=r
      register: cert_copy

    - name: copy private key for {{ item.name }}
      copy:
        content: "{{ item.ssl_key }}"
        dest: "{{ item.ssl_key_path }}"
        backup: yes
        mode: u=rw,g=r,o=r
      register: key_copy

    - name: copy intermediate trust certificate for {{ item.name }}
      copy:
        content: "{{ item.ssl_intermediate }}"
        dest: "{{ item.ssl_intermediate_path }}"
        backup: yes
        mode: u=rw,g=r,o=r
      register: intermediate_copy

    - name: copy root certificate for {{ item.name }}
      copy:
        content: "{{ item.ssl_ca }}"
        dest: "{{ item.ssl_ca_path }}"
        backup: yes
        mode: u=rw,g=r,o=r
      register: ca_copy

    - name: verify certificate chain
      shell: |
        openssl verify -CAfile {{ item.ssl_ca_path }} -untrusted {{ item.ssl_intermediate_path }} {{ item.ssl_certificate_path }}
      register: openssl_verify
      changed_when: false
    - debug:
        msg: "{{ openssl_verify.stdout_lines }}{{ openssl_verify.stderr_lines }}"
      failed_when: openssl_verify.rc >= 1

    - name: copy cerificate chain to {{ item.ssl_certificate_path }}
      copy:
        content: "{{ item.ssl_cert + '\n' + item.ssl_intermediate + '\n' + item.ssl_ca + '\n' }}"
        dest: "{{ item.ssl_certificate_path }}"
        backup: yes
        mode: u=rw,g=r,o=r

    - name: reload nginx
      service:
        name: nginx
        state: restarted
      register: nginx_reload

    - name: verify the cerificate
      shell: |
        echo "QUIT" | 
        openssl s_client -connect localhost:443 -servername {{ item.verify }} | 
        grep "Verify return code: 0 (ok)"
      register: s_client_result
      changed_when: false
    - debug:
        msg: "{{ s_client_result.stdout_lines }}{{ s_client_result.stderr_lines }}"
      failed_when: s_client_result.rc >= 1
    
  rescue:
    - name: restore original certificate files
      copy: 
        src: "{{ cert_copy.backup_file }}"
        dest: "{{ item.ssl_certificate_path }}"
        remote_src: yes
      when: cert_copy.backup_file is defined

    - copy: 
        src: "{{ key_copy.backup_file }}"
        dest: "{{ item.ssl_key_path }}"
        remote_src: yes
      when: key_copy.backup_file is defined

    - copy: 
        src: "{{ intermediate_copy.backup_file }}"
        dest: "{{ item.ssl_intermediate_path }}"
        remote_src: yes
      when: intermediate_copy.backup_file is defined

    - copy: 
        src: "{{ ca_copy.backup_file }}"
        dest: "{{ item.ssl_ca_path }}"
        remote_src: yes
      when: ca_copy.backup_file is defined

    - debug:
        msg: "{{ s_client_result }}"

    - service:
        name: nginx
        state: restarted
      when: s_client_result.rc >= 1 or 
            nginx_reload.rc >= 1
      ignore_errors: yes
      

